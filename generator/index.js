const fs = require('fs')
const path = require('path')
const recast = require('recast')

module.exports = (api, options, rootOptions) => {
  const storeRootDir = './src/store'
  const storeRootFile = './src/store/index.js'
  const templatesRoot = './templates'
  const moduleDir = path.join(storeRootDir, `${options.moduleName}`)
  const rootStoreFile = path.join(storeRootDir, '/index.js')

  // Verify vuex plugin installed
  if (!api.hasPlugin('vuex')) {
    console.warn('\nVuex plugin has not been installed')
    return
  }

  // Check store module directory if module already exists
  if (fs.existsSync(`src/store/${options.moduleName}`)) {
    api.exitLog(`Store module ${options.moduleName} already exists`, 'warn')
    return
  }

  // Remove store.js generated from initial vuex plugin installation
  if (fs.existsSync('./src/store.js')) {
    fs.unlink('./src/store.js', (err) => {
      if (err) {
        console.log("failed to delete store.js file generated by vuex plugin:" + err)
      } else {
        console.log('successfully deleted store.js file generated by vuex plugin')
      }
    })
  }

  // Render module template files
  api.render({
    // Render index, actions, getters, mutations template files
    [`${moduleDir}/index.js`]: `${templatesRoot}/module/index.js`,
    [`${moduleDir}/actions.js`]: `${templatesRoot}/module/actions.js`,
    [`${moduleDir}/getters.js`]: `${templatesRoot}/module/getters.js`,
    [`${moduleDir}/mutations.js`]: `${templatesRoot}/module/mutations.js`
  })

  // Verify storeRootFile exists, if not render
  if (!fs.existsSync(`${storeRootFile}`)) {
    api.render({
      [`${storeRootFile}`]: `${templatesRoot}/index.js`
    })
  }

  // inject import declaration for new store module
  api.injectImports(`${storeRootFile}`, `import ${options.moduleName} from './${options.moduleName}'`)

  api.postProcessFiles((files) => {
    const ast = recast.parse(files[`${storeRootFile}`])
    const expression = `${options.moduleName}`
    const objectExpression = recast.parse(expression).program.body[0].expression

    recast.types.visit(ast, {
      visitObjectExpression({
        node
      }) {
        if (node.properties[0].key.name === 'modules') {
          node.properties[0].value.properties.push(objectExpression)
        }

        return false
      }
    })

    files[`${storeRootFile}`] = recast.print(ast).code
  })

}